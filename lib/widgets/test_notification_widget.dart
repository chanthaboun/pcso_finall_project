// lib/widgets/test_notification_widget.dart
import 'package:flutter/material.dart';
import '../services/notification_service.dart';

class TestNotificationWidget extends StatelessWidget {
  const TestNotificationWidget({super.key});

  @override
  Widget build(BuildContext context) {
    return Container(
      margin: const EdgeInsets.symmetric(horizontal: 20, vertical: 8),
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(12),
        border: Border.all(color: Colors.orange, width: 2),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.05),
            blurRadius: 5,
            offset: const Offset(0, 1),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Container(
                width: 40,
                height: 40,
                decoration: BoxDecoration(
                  color: Colors.orange.withOpacity(0.1),
                  borderRadius: BorderRadius.circular(20),
                ),
                child: const Icon(
                  Icons.bug_report,
                  color: Colors.orange,
                  size: 20,
                ),
              ),
              const SizedBox(width: 12),
              const Expanded(
                child: Text(
                  '‡∫ó‡∫ª‡∫î‡∫™‡∫≠‡∫ö‡∫Å‡∫≤‡∫ô‡ªÅ‡∫à‡ªâ‡∫á‡ªÄ‡∫ï‡∫∑‡∫≠‡∫ô',
                  style: TextStyle(
                    fontSize: 16,
                    fontWeight: FontWeight.bold,
                    color: Colors.orange,
                  ),
                ),
              ),
            ],
          ),
          const SizedBox(height: 16),
          const Text(
            '‡∫Å‡∫ª‡∫î‡∫õ‡∫∏‡ªà‡∫°‡ªÄ‡∫û‡∫∑‡ªà‡∫≠‡∫ó‡∫ª‡∫î‡∫™‡∫≠‡∫ö‡∫Å‡∫≤‡∫ô‡ªÅ‡∫à‡ªâ‡∫á‡ªÄ‡∫ï‡∫∑‡∫≠‡∫ô‡ªÅ‡∫ï‡ªà‡∫•‡∫∞‡∫õ‡∫∞‡ªÄ‡∫û‡∫î:',
            style: TextStyle(
              fontSize: 12,
              color: Colors.grey,
            ),
          ),
          const SizedBox(height: 12),
          Wrap(
            spacing: 8,
            runSpacing: 8,
            children: [
              _buildTestButton(
                context,
                '‡∫¢‡∫≤',
                Icons.medication,
                Colors.blue,
                () => _testMedicationNotification(context),
              ),
              _buildTestButton(
                context,
                '‡∫ô‡∫≠‡∫ô',
                Icons.bedtime,
                Colors.purple,
                () => _testSleepNotification(context),
              ),
              _buildTestButton(
                context,
                '‡∫≠‡∫≠‡∫Å‡∫Å‡∫≥‡∫•‡∫±‡∫á',
                Icons.fitness_center,
                Colors.orange,
                () => _testExerciseNotification(context),
              ),
              _buildTestButton(
                context,
                '‡∫õ‡∫∞‡∫à‡∫≥‡ªÄ‡∫î‡∫∑‡∫≠‡∫ô',
                Icons.calendar_today,
                Colors.red,
                () => _testPeriodNotification(context),
              ),
              _buildTestButton(
                context,
                '‡∫•‡∫≤‡∫ç‡∫á‡∫≤‡∫ô',
                Icons.analytics,
                Colors.green,
                () => _testReportNotification(context),
              ),
              _buildTestButton(
                context,
                '‡ªÄ‡∫õ‡∫ª‡ªâ‡∫≤‡∫´‡∫°‡∫≤‡∫ç',
                Icons.flag,
                Colors.teal,
                () => _testGoalNotification(context),
              ),
            ],
          ),
          const SizedBox(height: 16),
          Row(
            children: [
              Expanded(
                child: ElevatedButton.icon(
                  onPressed: () => _scheduleMultipleTests(context),
                  icon: const Icon(Icons.schedule, size: 16),
                  label: const Text(
                    '‡∫ó‡∫ª‡∫î‡∫™‡∫≠‡∫ö‡∫ó‡∫±‡∫á‡ªù‡∫ª‡∫î',
                    style: TextStyle(fontSize: 12),
                  ),
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.orange,
                    foregroundColor: Colors.white,
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(8),
                    ),
                  ),
                ),
              ),
              const SizedBox(width: 8),
              Expanded(
                child: OutlinedButton.icon(
                  onPressed: () => _clearAllNotifications(context),
                  icon: const Icon(Icons.clear_all, size: 16),
                  label: const Text(
                    '‡∫•‡∫∂‡∫ö‡∫ó‡∫±‡∫á‡ªù‡∫ª‡∫î',
                    style: TextStyle(fontSize: 12),
                  ),
                  style: OutlinedButton.styleFrom(
                    foregroundColor: Colors.red,
                    side: const BorderSide(color: Colors.red),
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(8),
                    ),
                  ),
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }

  Widget _buildTestButton(
    BuildContext context,
    String label,
    IconData icon,
    Color color,
    VoidCallback onPressed,
  ) {
    return GestureDetector(
      onTap: onPressed,
      child: Container(
        padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
        decoration: BoxDecoration(
          color: color.withOpacity(0.1),
          borderRadius: BorderRadius.circular(16),
          border: Border.all(color: color.withOpacity(0.3)),
        ),
        child: Row(
          mainAxisSize: MainAxisSize.min,
          children: [
            Icon(icon, color: color, size: 14),
            const SizedBox(width: 4),
            Text(
              label,
              style: TextStyle(
                color: color,
                fontSize: 11,
                fontWeight: FontWeight.w600,
              ),
            ),
          ],
        ),
      ),
    );
  }

  Future<void> _testMedicationNotification(BuildContext context) async {
    await NotificationService.scheduleNotification(
      title: 'üíä ‡∫ó‡∫ª‡∫î‡∫™‡∫≠‡∫ö‡∫Å‡∫≤‡∫ô‡ªÅ‡∫à‡ªâ‡∫á‡ªÄ‡∫ï‡∫∑‡∫≠‡∫ô‡∫Å‡∫¥‡∫ô‡∫¢‡∫≤',
      body:
          '‡∫ô‡∫µ‡ªâ‡ªÅ‡∫°‡ªà‡∫ô‡∫Å‡∫≤‡∫ô‡∫ó‡∫ª‡∫î‡∫™‡∫≠‡∫ö‡∫Å‡∫≤‡∫ô‡ªÅ‡∫à‡ªâ‡∫á‡ªÄ‡∫ï‡∫∑‡∫≠‡∫ô‡∫Å‡∫¥‡∫ô‡∫¢‡∫≤ ‡∫ñ‡ªâ‡∫≤‡ªÄ‡∫à‡∫ª‡ªâ‡∫≤‡ªÄ‡∫´‡∫±‡∫ô‡∫Ç‡ªç‡ªâ‡∫Ñ‡∫ß‡∫≤‡∫°‡∫ô‡∫µ‡ªâ ‡ªÅ‡∫°‡ªà‡∫ô‡∫Å‡∫≤‡∫ô‡ªÅ‡∫à‡ªâ‡∫á‡ªÄ‡∫ï‡∫∑‡∫≠‡∫ô‡ªÄ‡∫Æ‡∫±‡∫î‡∫ß‡∫Ω‡∫Å‡∫õ‡∫ª‡∫Å‡∫Å‡∫∞‡∫ï‡∫¥',
      type: NotificationType.medication,
      scheduledTime: DateTime.now().add(const Duration(seconds: 3)),
    );

    if (context.mounted) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('‡∫ó‡∫ª‡∫î‡∫™‡∫≠‡∫ö‡∫Å‡∫≤‡∫ô‡ªÅ‡∫à‡ªâ‡∫á‡ªÄ‡∫ï‡∫∑‡∫≠‡∫ô‡∫Å‡∫¥‡∫ô‡∫¢‡∫≤‡ªÉ‡∫ô 3 ‡∫ß‡∫¥‡∫ô‡∫≤‡∫ó‡∫µ...'),
          backgroundColor: Colors.blue,
          duration: Duration(seconds: 2),
        ),
      );
    }
  }

  Future<void> _testSleepNotification(BuildContext context) async {
    await NotificationService.scheduleNotification(
      title: 'üò¥ ‡∫ó‡∫ª‡∫î‡∫™‡∫≠‡∫ö‡∫Å‡∫≤‡∫ô‡ªÅ‡∫à‡ªâ‡∫á‡ªÄ‡∫ï‡∫∑‡∫≠‡∫ô‡∫ô‡∫≠‡∫ô',
      body: '‡∫ñ‡∫∑‡∫á‡ªÄ‡∫ß‡∫•‡∫≤‡∫ô‡∫≠‡∫ô‡ªÅ‡∫•‡ªâ‡∫ß! ‡∫û‡∫±‡∫Å‡∫ú‡ªà‡∫≠‡∫ô‡ªÉ‡∫´‡ªâ‡ªÄ‡∫û‡∫Ω‡∫á‡∫û‡ªç',
      type: NotificationType.sleep,
      scheduledTime: DateTime.now().add(const Duration(seconds: 5)),
    );

    if (context.mounted) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('‡∫ó‡∫ª‡∫î‡∫™‡∫≠‡∫ö‡∫Å‡∫≤‡∫ô‡ªÅ‡∫à‡ªâ‡∫á‡ªÄ‡∫ï‡∫∑‡∫≠‡∫ô‡∫ô‡∫≠‡∫ô‡ªÉ‡∫ô 5 ‡∫ß‡∫¥‡∫ô‡∫≤‡∫ó‡∫µ...'),
          backgroundColor: Colors.purple,
          duration: Duration(seconds: 2),
        ),
      );
    }
  }

  Future<void> _testExerciseNotification(BuildContext context) async {
    await NotificationService.scheduleNotification(
      title: 'üèÉ‚Äç‚ôÄÔ∏è ‡∫ó‡∫ª‡∫î‡∫™‡∫≠‡∫ö‡∫Å‡∫≤‡∫ô‡ªÅ‡∫à‡ªâ‡∫á‡ªÄ‡∫ï‡∫∑‡∫≠‡∫ô‡∫≠‡∫≠‡∫Å‡∫Å‡∫≥‡∫•‡∫±‡∫á‡∫Å‡∫≤‡∫ç',
      body: '‡∫°‡∫≤‡∫≠‡∫≠‡∫Å‡∫Å‡∫≥‡∫•‡∫±‡∫á‡∫Å‡∫≤‡∫ç‡ªÄ‡∫û‡∫∑‡ªà‡∫≠‡∫™‡∫∏‡∫Ç‡∫∞‡∫û‡∫≤‡∫ö‡∫ó‡∫µ‡ªà‡∫î‡∫µ‡∫Å‡∫±‡∫ô‡ªÄ‡∫ñ‡∫≤‡∫∞!',
      type: NotificationType.exercise,
      scheduledTime: DateTime.now().add(const Duration(seconds: 7)),
    );

    if (context.mounted) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('‡∫ó‡∫ª‡∫î‡∫™‡∫≠‡∫ö‡∫Å‡∫≤‡∫ô‡ªÅ‡∫à‡ªâ‡∫á‡ªÄ‡∫ï‡∫∑‡∫≠‡∫ô‡∫≠‡∫≠‡∫Å‡∫Å‡∫≥‡∫•‡∫±‡∫á‡∫Å‡∫≤‡∫ç‡ªÉ‡∫ô 7 ‡∫ß‡∫¥‡∫ô‡∫≤‡∫ó‡∫µ...'),
          backgroundColor: Colors.orange,
          duration: Duration(seconds: 2),
        ),
      );
    }
  }

  Future<void> _testPeriodNotification(BuildContext context) async {
    await NotificationService.scheduleNotification(
      title: 'ü©∏ ‡∫ó‡∫ª‡∫î‡∫™‡∫≠‡∫ö‡∫Å‡∫≤‡∫ô‡ªÅ‡∫à‡ªâ‡∫á‡ªÄ‡∫ï‡∫∑‡∫≠‡∫ô‡∫õ‡∫∞‡∫à‡∫≥‡ªÄ‡∫î‡∫∑‡∫≠‡∫ô',
      body: '‡∫Å‡∫≤‡∫ô‡ªÅ‡∫à‡ªâ‡∫á‡ªÄ‡∫ï‡∫∑‡∫≠‡∫ô‡∫Å‡ªà‡∫Ω‡∫ß‡∫Å‡∫±‡∫ö‡∫õ‡∫∞‡∫à‡∫≥‡ªÄ‡∫î‡∫∑‡∫≠‡∫ô‡∫Ç‡∫≠‡∫á‡ªÄ‡∫à‡∫ª‡ªâ‡∫≤',
      type: NotificationType.period,
      scheduledTime: DateTime.now().add(const Duration(seconds: 9)),
    );

    if (context.mounted) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('‡∫ó‡∫ª‡∫î‡∫™‡∫≠‡∫ö‡∫Å‡∫≤‡∫ô‡ªÅ‡∫à‡ªâ‡∫á‡ªÄ‡∫ï‡∫∑‡∫≠‡∫ô‡∫õ‡∫∞‡∫à‡∫≥‡ªÄ‡∫î‡∫∑‡∫≠‡∫ô‡ªÉ‡∫ô 9 ‡∫ß‡∫¥‡∫ô‡∫≤‡∫ó‡∫µ...'),
          backgroundColor: Colors.red,
          duration: Duration(seconds: 2),
        ),
      );
    }
  }

  Future<void> _testReportNotification(BuildContext context) async {
    await NotificationService.scheduleNotification(
      title: 'üìä ‡∫ó‡∫ª‡∫î‡∫™‡∫≠‡∫ö‡∫•‡∫≤‡∫ç‡∫á‡∫≤‡∫ô‡∫õ‡∫∞‡∫à‡∫≥‡∫≠‡∫≤‡∫ó‡∫¥‡∫î',
      body: '‡∫•‡∫≤‡∫ç‡∫á‡∫≤‡∫ô‡∫™‡∫∏‡∫Ç‡∫∞‡∫û‡∫≤‡∫ö‡∫õ‡∫∞‡∫à‡∫≥‡∫≠‡∫≤‡∫ó‡∫¥‡∫î‡∫Ç‡∫≠‡∫á‡ªÄ‡∫à‡∫ª‡ªâ‡∫≤‡∫û‡ªâ‡∫≠‡∫°‡ªÅ‡∫•‡ªâ‡∫ß!',
      type: NotificationType.report,
      scheduledTime: DateTime.now().add(const Duration(seconds: 11)),
    );

    if (context.mounted) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('‡∫ó‡∫ª‡∫î‡∫™‡∫≠‡∫ö‡∫•‡∫≤‡∫ç‡∫á‡∫≤‡∫ô‡ªÉ‡∫ô 11 ‡∫ß‡∫¥‡∫ô‡∫≤‡∫ó‡∫µ...'),
          backgroundColor: Colors.green,
          duration: Duration(seconds: 2),
        ),
      );
    }
  }

  Future<void> _testGoalNotification(BuildContext context) async {
    await NotificationService.scheduleNotification(
      title: 'üéØ ‡∫ó‡∫ª‡∫î‡∫™‡∫≠‡∫ö‡∫Å‡∫≤‡∫ô‡ªÅ‡∫à‡ªâ‡∫á‡ªÄ‡∫ï‡∫∑‡∫≠‡∫ô‡ªÄ‡∫õ‡∫ª‡ªâ‡∫≤‡∫´‡∫°‡∫≤‡∫ç',
      body: '‡∫°‡∫≤‡∫ï‡∫¥‡∫î‡∫ï‡∫≤‡∫°‡∫Ñ‡∫ß‡∫≤‡∫°‡∫Ñ‡∫∑‡∫ö‡ªú‡ªâ‡∫≤‡ªÄ‡∫õ‡∫ª‡ªâ‡∫≤‡∫´‡∫°‡∫≤‡∫ç‡∫Ç‡∫≠‡∫á‡ªÄ‡∫à‡∫ª‡ªâ‡∫≤!',
      type: NotificationType.goal,
      scheduledTime: DateTime.now().add(const Duration(seconds: 13)),
    );

    if (context.mounted) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('‡∫ó‡∫ª‡∫î‡∫™‡∫≠‡∫ö‡ªÄ‡∫õ‡∫ª‡ªâ‡∫≤‡∫´‡∫°‡∫≤‡∫ç‡ªÉ‡∫ô 13 ‡∫ß‡∫¥‡∫ô‡∫≤‡∫ó‡∫µ...'),
          backgroundColor: Colors.teal,
          duration: Duration(seconds: 2),
        ),
      );
    }
  }

  Future<void> _scheduleMultipleTests(BuildContext context) async {
    // Schedule all types with different intervals
    _testMedicationNotification(context);
    await Future.delayed(const Duration(milliseconds: 500));
    _testSleepNotification(context);
    await Future.delayed(const Duration(milliseconds: 500));
    _testExerciseNotification(context);
    await Future.delayed(const Duration(milliseconds: 500));
    _testPeriodNotification(context);
    await Future.delayed(const Duration(milliseconds: 500));
    _testReportNotification(context);
    await Future.delayed(const Duration(milliseconds: 500));
    _testGoalNotification(context);

    if (context.mounted) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('‡∫Å‡∫≥‡∫•‡∫±‡∫á‡∫ó‡∫ª‡∫î‡∫™‡∫≠‡∫ö‡∫Å‡∫≤‡∫ô‡ªÅ‡∫à‡ªâ‡∫á‡ªÄ‡∫ï‡∫∑‡∫≠‡∫ô‡∫ó‡∫±‡∫á‡ªù‡∫ª‡∫î! ‡∫•‡ªç‡∫ñ‡ªâ‡∫≤...'),
          backgroundColor: Colors.orange,
          duration: Duration(seconds: 3),
        ),
      );
    }
  }

  Future<void> _clearAllNotifications(BuildContext context) async {
    // Get all notifications
    final notifications = NotificationService.getAllNotifications();

    // Cancel all notifications
    for (var notification in notifications) {
      await NotificationService.cancelNotification(notification.id);
    }

    if (context.mounted) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('‡∫•‡∫∂‡∫ö‡∫Å‡∫≤‡∫ô‡ªÅ‡∫à‡ªâ‡∫á‡ªÄ‡∫ï‡∫∑‡∫≠‡∫ô ${notifications.length} ‡∫≠‡∫±‡∫ô‡ªÅ‡∫•‡ªâ‡∫ß'),
          backgroundColor: Colors.red,
          duration: const Duration(seconds: 2),
        ),
      );
    }
  }
}
